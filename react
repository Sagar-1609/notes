1. Virtual DOM

Browser me ek Real DOM hota hai (jo tum document.getElementById se access karte ho).

React ek Virtual DOM banata hai → basically ek JavaScript ka object copy of the real DOM.

Jab tum state update karte ho:

React pehle Virtual DOM update karta hai.

Phir diffing algorithm se check karta hai ki real DOM me kya change karna hai.

Sirf wahi part update hota hai (na ki pura page reload).

👉 Fayda = fast performance.

2nd sub topic 
React vs ReactDOM

React: Components banata hai, state/props manage karta hai (brains 🧠).

ReactDOM: Un components ko actual real DOM me dikhata hai (hands 👷).




JSX (JavaScript XML)

JavaScript + HTML mix ka syntax.

Example:

const element = <h1>Hello, world!</h1>;


Browser JSX samajhta nahi, isliye Babel usko normal JS me convert karta hai:

const element = React.createElement("h1", null, "Hello, world!");


👉 Interviewer aksar poochta hai: “JSX bina React ke use kar sakte ho?”
Answer: Haan, par inconvenient hoga kyunki React.createElement likhna padega har jagah. JSX is just syntactic sugar.






JSX kya hai?

JSX = JavaScript XML

Matlab tum JS file ke andar HTML–like syntax likh sakte ho.

Example:

const element = <h1>Hello, world!</h1>;


Ye simple aur readable lagta hai.

Browser JSX samajhta hai kya?

❌ Nahi. Browser ko <h1>Hello</h1> JS ke andar de doge toh woh confuse ho jaayega.
👉 Isliye Babel (ek compiler) usko convert karta hai plain JavaScript me.

JSX ka asli roop (after Babel)

Woh hi code actually aisa ban jaata hai:

const element = React.createElement("h1", null, "Hello, world!");


React.createElement: ek function hai jo React ko bolta hai →
“Ek naya virtual DOM node banao jisme type = h1 aur content = Hello, world!”

Toh bina JSX use kar sakte ho?

✅ Bilkul. Tum pura React app bina JSX likh sakte ho, bas React.createElement use karke.
❌ Lekin woh bohot boring aur lamba code ban jaayega.

Example without JSX:

const element = React.createElement(
  "div",
  null,
  React.createElement("h1", null, "Hello"),
  React.createElement("p", null, "This is React without JSX")
);


Same cheez JSX me:

const element = (
  <div>
    <h1>Hello</h1>
    <p>This is React with JSX</p>
  </div>
);


👉 Isi liye bolte hain JSX is syntactic sugar → bas ek shortcut hai, asal me sab React.createElement hi hota hai.
e line dekh:
const element = React.createElement("h1", null, "Hello, world!");


Ye normal JavaScript code hi hai.

Browser ko ye line samajh aati hai, kyunki isme sirf function call hai.

2. Ye kya karta hai?

React.createElement ek JavaScript object banata hai (Virtual DOM ka node).

Example output kuch aisa hota hai:

{
  type: "h1",
  props: {
    children: "Hello, world!"
  }
}


Ab ye object ReactDOM use karke real DOM me <h1>Hello, world!</h1> banata hai.

3. Toh confusion kahan hai?

JSX (<h1>Hello</h1>) → browser ko seedha samajh nahi aata.

React.createElement(...) → ye JS hai, browser samajh sakta hai.

👉 Isliye JSX ko Babel convert karke React.createElement me badal deta hai, taki browser run kar sake.










  state vs props
Chalo bhai 🚀 ab State vs Props clear karte hain — yeh interviewer ka favourite hota hai.

🔹 1. Props

Props = Properties

Parent → Child data bhejne ka tareeka.

Read-only (child sirf use kar sakta hai, change nahi kar sakta).

Example:

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

<Welcome name="Sagar" />


👉 name="Sagar" is a prop.

🔹 2. State

Component ke andar ka data jo change ho sakta hai.

useState hook ke through manage karte hain.

Jab state change hota hai → component re-render hota hai.

Example:

function Counter() {
  const [count, setCount] = React.useState(0);

  return (
    <div>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>+</button>
    </div>
  );
}




